package controller

import (
	"net/http"

	"github.com/danielmoisa/envoy/src/response"
	"github.com/gin-gonic/gin"
)

const (
	// Validation Errors
	ERROR_FLAG_INVALID_CREDENTIALS     = "ERROR_FLAG_INVALID_CREDENTIALS"
	ERROR_FLAG_EMAIL_ALREADY_EXISTS    = "ERROR_FLAG_EMAIL_ALREADY_EXISTS"
	ERROR_FLAG_USERNAME_ALREADY_EXISTS = "ERROR_FLAG_USERNAME_ALREADY_EXISTS"
	ERROR_FLAG_INVALID_LOGIN           = "INVALID_LOGIN_REQUEST"
	ERROR_FLAG_TOKEN_GENERATION        = "TOKEN_GENERATION_ERROR"

	// User Related Errors
	ERROR_FLAG_USER_NOT_FOUND        = "ERROR_FLAG_USER_NOT_FOUND"
	ERROR_FLAG_USER_CREATE_FAILED    = "ERROR_FLAG_USER_CREATE_FAILED"
	ERROR_FLAG_USER_UPDATE_FAILED    = "ERROR_FLAG_USER_UPDATE_FAILED"
	ERROR_FLAG_USER_DELETE_FAILED    = "ERROR_FLAG_USER_DELETE_FAILED"
	ERROR_FLAG_USER_PASSWORD_INVALID = "ERROR_FLAG_USER_PASSWORD_INVALID"
	ERROR_FLAG_USER_GET_FAILED       = "ERROR_FLAG_USER_GET_FAILED"

	// Company Related Errors
	ERROR_FLAG_COMPANY_GET_FAILED    = "ERROR_FLAG_COMPANY_GET_FAILED"
	ERROR_FLAG_COMPANY_NOT_FOUND     = "ERROR_FLAG_COMPANY_NOT_FOUND"
	ERROR_FLAG_COMPANY_CREATE_FAILED = "ERROR_FLAG_COMPANY_CREATE_FAILED"
	ERROR_FLAG_COMPANY_UPDATE_FAILED = "ERROR_FLAG_COMPANY_UPDATE_FAILED"
	ERROR_FLAG_COMPANY_DELETE_FAILED = "ERROR_FLAG_COMPANY_DELETE_FAILED"

	// Candidate Related Errors
	ERROR_FLAG_CANDIDATE_NOT_FOUND     = "ERROR_FLAG_CANDIDATE_NOT_FOUND"
	ERROR_FLAG_CANDIDATE_CREATE_FAILED = "ERROR_FLAG_CANDIDATE_CREATE_FAILED"
	ERROR_FLAG_CANDIDATE_UPDATE_FAILED = "ERROR_FLAG_CANDIDATE_UPDATE_FAILED"
	ERROR_FLAG_CANDIDATE_DELETE_FAILED = "ERROR_FLAG_CANDIDATE_DELETE_FAILED"

	// Job Related Errors
	ERROR_FLAG_JOB_NOT_FOUND     = "ERROR_FLAG_JOB_NOT_FOUND"
	ERROR_FLAG_JOB_CREATE_FAILED = "ERROR_FLAG_JOB_CREATE_FAILED"
	ERROR_FLAG_JOB_UPDATE_FAILED = "ERROR_FLAG_JOB_UPDATE_FAILED"
	ERROR_FLAG_JOB_DELETE_FAILED = "ERROR_FLAG_JOB_DELETE_FAILED"
	ERROR_FLAG_JOB_GET_FAILED    = "ERROR_FLAG_JOB_GET_FAILED"

	// Application Related Errors
	ERROR_FLAG_APPLICATION_NOT_FOUND      = "ERROR_FLAG_APPLICATION_NOT_FOUND"
	ERROR_FLAG_APPLICATION_CREATE_FAILED  = "ERROR_FLAG_APPLICATION_CREATE_FAILED"
	ERROR_FLAG_APPLICATION_UPDATE_FAILED  = "ERROR_FLAG_APPLICATION_UPDATE_FAILED"
	ERROR_FLAG_APPLICATION_DELETE_FAILED  = "ERROR_FLAG_APPLICATION_DELETE_FAILED"
	ERROR_FLAG_APPLICATION_STATUS_INVALID = "ERROR_FLAG_APPLICATION_STATUS_INVALID"
	ERROR_FLAG_APPLICATION_GET_FAILED     = "ERROR_FLAG_APPLICATION_GET_FAILED"

	// Authorization Errors
	ERROR_FLAG_UNAUTHORIZED            = "ERROR_FLAG_UNAUTHORIZED"
	ERROR_FLAG_FORBIDDEN               = "ERROR_FLAG_FORBIDDEN"
	ERROR_FLAG_TOKEN_EXPIRED           = "ERROR_FLAG_TOKEN_EXPIRED"
	ERROR_FLAG_TOKEN_INVALID           = "ERROR_FLAG_TOKEN_INVALID"
	ERROR_FLAG_TOKEN_GENERATION_FAILED = "ERROR_FLAG_TOKEN_GENERATION_FAILED"

	// General Errors
	ERROR_FLAG_INTERNAL_SERVER_ERROR = "ERROR_FLAG_INTERNAL_SERVER_ERROR"
	ERROR_FLAG_BAD_REQUEST           = "ERROR_FLAG_BAD_REQUEST"
	ERROR_FLAG_NOT_FOUND             = "ERROR_FLAG_NOT_FOUND"
	ERROR_FLAG_INVALID_INPUT         = "ERROR_FLAG_INVALID_INPUT"
)

func (ctrl *Controller) FeedbackOK(c *gin.Context, resp response.Response) {
	if resp != nil {
		c.JSON(http.StatusOK, resp.ExportForFeedback())
		return
	}
	// HTTP 200 with empty response
	c.JSON(http.StatusOK, nil)
}

func (ctrl *Controller) FeedbackCreated(c *gin.Context, resp response.Response) {
	if resp != nil {
		c.JSON(http.StatusCreated, resp.ExportForFeedback())
		return
	}
	// HTTP 201 with empty response
	c.JSON(http.StatusCreated, nil)
}

func (ctrl *Controller) FeedbackBadRequest(c *gin.Context, errorFlag string, errorMessage string) {
	c.JSON(http.StatusBadRequest, gin.H{
		"errorCode":    400,
		"errorFlag":    errorFlag,
		"errorMessage": errorMessage,
	})
}

func (ctrl *Controller) FeedbackRedirect(c *gin.Context, uri string) {
	c.Redirect(302, uri)
}

func (ctrl *Controller) FeedbackInternalServerError(c *gin.Context, errorFlag string, errorMessage string) {
	c.JSON(http.StatusInternalServerError, gin.H{
		"errorCode":    500,
		"errorFlag":    errorFlag,
		"errorMessage": errorMessage,
	})
}
