definitions:
  github_com_danielmoisa_envoy_src_model.Candidate:
    properties:
      createdAt:
        type: string
      experience:
        description: Years of experience
        type: integer
      id:
        type: string
      is_available:
        type: boolean
      skills:
        items:
          $ref: '#/definitions/github_com_danielmoisa_envoy_src_model.Skill'
        type: array
      summary:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  github_com_danielmoisa_envoy_src_model.Company:
    properties:
      company_logo:
        type: string
      company_name:
        type: string
      company_size:
        type: string
      company_website:
        type: string
      createdAt:
        type: string
      id:
        type: string
      industry:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
  github_com_danielmoisa_envoy_src_model.Skill:
    properties:
      category:
        type: string
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  github_com_danielmoisa_envoy_src_model.UserRole:
    enum:
    - candidate
    - company
    - admin
    type: string
    x-enum-varnames:
    - RoleCandidate
    - RoleCompany
    - RoleAdmin
  src_controller.UserDTO:
    properties:
      avatar:
        type: string
      candidate:
        allOf:
        - $ref: '#/definitions/github_com_danielmoisa_envoy_src_model.Candidate'
        description: Associations
      company:
        $ref: '#/definitions/github_com_danielmoisa_envoy_src_model.Company'
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/github_com_danielmoisa_envoy_src_model.UserRole'
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: This is a sample API
  termsOfService: http://example.com/terms/
  title: Envoy API
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Returns the server health status as a simple "OK" message.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get the health status of the server
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Fetch all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/src_controller.UserDTO'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User details
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/src_controller.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/src_controller.UserDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Users
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their unique user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Fetches user details using the provided user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/src_controller.UserDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by ID
      tags:
      - Users
swagger: "2.0"
